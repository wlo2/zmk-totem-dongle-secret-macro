name: Build ZMK firmware

on: 
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      include_settings_reset:
        description: 'Build settings reset firmware'
        required: false
        default: false
        type: boolean

jobs:
  matrix:
    runs-on: ubuntu-latest
    name: Fetch Build Keyboards
    outputs:
      build_matrix: ${{ env.build_matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Fetch Build Matrix
        run: |
          echo "build_matrix=$(yq -oj -I0 'build.yaml')" >> $GITHUB_ENV
          yq -oj "build.yaml"

  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository_owner }}/zmk-zephyr:core-move-to-zephyr-4-1
    needs: matrix
    name: Build
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.build_matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create build directory
        run: |
          echo "build_dir=$(mktemp -d)" >> $GITHUB_ENV

      - name: Prepare variables
        shell: sh -x {0}
        env:
          board: ${{ matrix.board }}
          shield: ${{ matrix.shield }}
          artifact_name: ${{ matrix.artifact-name }}
          snippet: ${{ matrix.snippet }}
        run: |
          if [ -e zephyr/module.yml ]; then
            export zmk_load_arg=" -DZMK_EXTRA_MODULES='${GITHUB_WORKSPACE}'"
            # Use pre-baked west workspace inside the container image
            echo "base_dir=/opt/zmk-env" >> $GITHUB_ENV
            echo "ZEPHYR_BASE=/opt/zmk-env/zephyr" >> $GITHUB_ENV
          else
            echo "base_dir=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
            echo "ZEPHYR_BASE=zephyr" >> $GITHUB_ENV
          fi

          if [ -n "${snippet}" ]; then
            extra_west_args="-S \"${snippet}\""
          fi

          echo "zephyr_version=${ZEPHYR_VERSION}" >> $GITHUB_ENV
          echo "extra_west_args=${extra_west_args}" >> $GITHUB_ENV
          echo "extra_cmake_args=${shield:+-DSHIELD=\"$shield\"}${zmk_load_arg}" >> $GITHUB_ENV
          echo "display_name=${shield:+$shield - }${board}" >> $GITHUB_ENV
          echo "artifact_name=${artifact_name:-${shield:+$shield-}${board}-zmk}" >> $GITHUB_ENV

      - name: Skip copying into pre-baked workspace (no-op)
        run: echo "Using repo via ZMK_EXTRA_MODULES and config from GITHUB_WORKSPACE"

      - name: Generate secret macro overlay
        run: |
          echo "Generating secret macro overlay..."
          
          # Create config directory
          mkdir -p "${GITHUB_WORKSPACE}/config"
          
          # Check if secret is available
          if [ -z "${{ secrets.STRING_PLACEHOLDER }}" ]; then
            echo "Warning: STRING_PLACEHOLDER secret not set or empty"
            echo "Creating fallback macro that outputs placeholder text"
            
            # Create fallback macro
            printf "behaviors {\n" > "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            printf "    secret_macro: secret_macro {\n" >> "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            printf "        compatible = \"zmk,behavior-macro\";\n" >> "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            printf "        #binding-cells = <0>;\n" >> "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            printf "        bindings = <&kp S &kp E &kp C &kp R &kp E &kp T>;\n" >> "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            printf "        wait-ms = <10>;\n" >> "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            printf "        tap-ms = <10>;\n" >> "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            printf "    };\n" >> "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            printf "};\n" >> "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            
            echo "Fallback secret macro created (types 'SECRET')"
          else
            echo "STRING_PLACEHOLDER secret found, creating custom macro"
            
            # Validate secret content format
            SECRET_CONTENT="${{ secrets.STRING_PLACEHOLDER }}"
            if ! echo "$SECRET_CONTENT" | grep -q '^&'; then
              echo "Warning: Secret content doesn't start with '&' - this may not be valid ZMK binding format"
              echo "Expected format: '&kp H &kp E &kp L &kp L &kp O' or similar"
            fi
            
            # Create the actual secret macro
            printf "behaviors {\n" > "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            printf "    secret_macro: secret_macro {\n" >> "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            printf "        compatible = \"zmk,behavior-macro\";\n" >> "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            printf "        #binding-cells = <0>;\n" >> "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            echo "        bindings = <$SECRET_CONTENT>;" >> "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            printf "        wait-ms = <10>;\n" >> "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            printf "        tap-ms = <10>;\n" >> "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            printf "    };\n" >> "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            printf "};\n" >> "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            
            echo "Custom secret macro created successfully"
          fi
          
          # Verify the generated file
          if [ -f "${GITHUB_WORKSPACE}/config/secret_macro.overlay" ]; then
            echo "Generated overlay file:"
            cat "${GITHUB_WORKSPACE}/config/secret_macro.overlay"
            
            # Basic syntax validation
            if grep -q "behaviors {" "${GITHUB_WORKSPACE}/config/secret_macro.overlay" && \
               grep -q "secret_macro:" "${GITHUB_WORKSPACE}/config/secret_macro.overlay" && \
               grep -q "bindings = <" "${GITHUB_WORKSPACE}/config/secret_macro.overlay"; then
              echo "Overlay file structure validation passed"
            
            # Check if bootloader_fix.overlay exists and show its content
            if [ -f "${GITHUB_WORKSPACE}/config/bootloader_fix.overlay" ]; then
              echo "Bootloader fix overlay found:"
              cat "${GITHUB_WORKSPACE}/config/bootloader_fix.overlay"
            else
              echo "Bootloader fix overlay not found"
            fi
            else
              echo "Error: Generated overlay file has invalid structure"
              exit 1
            fi
          else
            echo "Error: Failed to create secret_macro.overlay file"
            exit 1
          fi
        env:
          STRING_PLACEHOLDER: ${{ secrets.STRING_PLACEHOLDER }}

      # Pre-baked image already has west workspace; no cache/init/update/export needed

      - name: Checkout zmk_autocorrect module
        uses: actions/checkout@v4
        with:
          repository: wlo2/zmk_autocorrect
          path: zmk_autocorrect

      # Twister deps are baked into the image; no venv/pip install required

      - name: Run unit tests (Twister)
        continue-on-error: true
        working-directory: /opt/zmk-env
        env:
          ZEPHYR_BASE: ${{ env.ZEPHYR_BASE }}
        run: |
          python zephyr/scripts/twister \
            -T "${GITHUB_WORKSPACE}/zmk_autocorrect/tests/autocorrect" \
            -p native_sim --inline-logs -v

      - name: West Build (${{ env.display_name }})
        working-directory: /opt/zmk-env
        shell: sh -x {0}
        env:
          ZEPHYR_BASE: zephyr
        run: west build -s zmk/app -d "${{ env.build_dir }}" -b "${{ matrix.board }}" ${{ env.extra_west_args }} -- -DZMK_CONFIG=${GITHUB_WORKSPACE}/config ${{ env.extra_cmake_args }} ${{ matrix.cmake-args }}

      - name: ${{ env.display_name }} Kconfig file
        run: |
          if [ -f "${{ env.build_dir }}/zephyr/.config" ]
          then
            grep -v -e "^#" -e "^$" "${{ env.build_dir }}/zephyr/.config" | sort
          else
            echo "No Kconfig output"
          fi
        if: ${{ !cancelled() }}

      - name: Rename artifacts
        shell: sh -x {0}
        run: |
          mkdir "${{ env.build_dir }}/artifacts"
          if [ -f "${{ env.build_dir }}/zephyr/zmk.uf2" ]
          then
            cp "${{ env.build_dir }}/zephyr/zmk.uf2" "${{ env.build_dir }}/artifacts/${{ env.artifact_name }}.uf2"
          elif [ -f "${{ env.build_dir }}/zephyr/zmk.bin" ]
          then
            cp "${{ env.build_dir }}/zephyr/zmk.bin" "${{ env.build_dir }}/artifacts/${{ env.artifact_name }}.bin"
          fi

      - name: Archive (${{ env.display_name }})
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ env.artifact_name }}
          path: ${{ env.build_dir }}/artifacts

  merge:
    runs-on: ubuntu-latest
    needs: build
    name: Merge Output Artifacts
    steps:
      - name: Get formatted timestamp for archive name
        id: timestamp_generator
        run: |
          formatted_time=$(date -u +%d%m%Y_%H%M)
          echo "ARTIFACT_NAME=zmk_$formatted_time" >> $GITHUB_OUTPUT
        shell: bash

      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: ${{ steps.timestamp_generator.outputs.ARTIFACT_NAME }}
          pattern: artifact-*
          delete-merged: true