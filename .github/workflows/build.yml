on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: zmkfirmware/zmk-build-arm:stable
    strategy:
      matrix:
        include:
          - board: seeeduino_xiao_ble
            shield: totem_left
          - board: seeeduino_xiao_ble
            shield: totem_right
          - board: seeeduino_xiao_ble
            shield: totem_dongle
            snippet: studio-rpc-usb-uart
            cmake-args: -DCONFIG_ZMK_STUDIO=y
          - board: seeeduino_xiao_ble
            shield: settings_reset
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - name: Fix keymap include order
      #   run: |
      #     KEYMAP_FILE="config/totem.keymap" # Define the path to your keymap file

      #     # Define the exact line we want to move/insert.
      #     # We'll use this precise string for both detection and insertion.
      #     # Stripping potential newlines ensures it's one clean line.
      #     SECRET_MACRO_LINE='#include "secret_macro.overlay"' # Removed the comment part for simplicity and robustness.

      #     echo "DEBUG: Processing keymap file: ${KEYMAP_FILE}"
      #     echo "DEBUG: Target secret macro line: [${SECRET_MACRO_LINE}]"

      #     # 1. Remove all existing instances of the secret_macro include line.
      #     #    Using '~' as the sed delimiter because SECRET_MACRO_LINE contains '/'.
      #     #    This ensures we start with a clean slate for insertion.
      #     sed -i "\~${SECRET_MACRO_LINE}~d" "$KEYMAP_FILE"
      #     echo "DEBUG: Removed any existing instances of secret_macro_line."

      #     # 2. Insert the secret_macro include line at the correct position.
      #     #    We need to escape forward slashes in the lines for sed pattern matching/insertion.
      #     ESCAPED_SECRET_MACRO_LINE=$(echo "$SECRET_MACRO_LINE" | sed 's/\//\\\//g') # Escapes / to \/
      #     TARGET_LINE='#include <dt-bindings/zmk/keys.h>'
      #     ESCAPED_TARGET_LINE=$(echo "$TARGET_LINE" | sed 's/\//\\\//g')

      #     # Check if the target line exists in the file.
      #     # 'grep -q' runs silently and returns 0 if found, 1 if not.
      #     if grep -q "$TARGET_LINE" "$KEYMAP_FILE"; then
      #       echo "DEBUG: Found target line '${TARGET_LINE}'. Inserting secret_macro_line after it."
      #       # Insert the escaped secret_macro_line after the escaped target_line.
      #       # 'a\' requires a literal newline after it in the script, then the text.
      #       sed -i "/${ESCAPED_TARGET_LINE}/a\\
      #     ${ESCAPED_SECRET_MACRO_LINE}" "$KEYMAP_FILE"
      #       echo "DEBUG: Inserted secret_macro_line."
      #     else
      #       echo "DEBUG: Target line '${TARGET_LINE}' NOT found. Appending secret_macro_line to end as fallback."
      #       # Fallback: If the target line isn't found, append it to the end of the file.
      #       echo "$SECRET_MACRO_LINE" >> "$KEYMAP_FILE"
      #       echo "DEBUG: Appended secret_macro_line."
      #     fi

      #     echo "Keymap include order fix attempt complete."
      #   shell: bash

      - name: Cache west modules
        uses: actions/cache@v4
        with:
          path: |
            modules/
            tools/
            zephyr/
            bootloader/
          key: ${{ runner.os }}-west-${{ hashFiles('**/west.yml', '**/build.yaml') }}
          restore-keys: |
            ${{ runner.os }}-west-

      - name: West Init
        run: west init -l config

      - name: West Update
        run: west update

      - name: West Zephyr export
        run: west zephyr-export

      # Generate secret macro overlay with DIRECT DTS injection
      - name: Generate secret macro overlay
        run: |
          mkdir -p config
          # REMOVE this line: printf "/ {\n" > config/secret_macro.overlay
          
          # Start directly with the 'behaviors' node definition
          printf "behaviors {\n" > config/secret_macro.overlay # THIS IS THE NEW START OF THE FILE
          printf "    secret_macro: secret_macro {\n" >> config/secret_macro.overlay
          printf "        compatible = \"zmk,behavior-macro\";\n" >> config/secret_macro.overlay
          printf "        #binding-cells = <0>;\n" >> config/secret_macro.overlay
          echo "        bindings = <${{ secrets.STRING_PLACEHOLDER }}>;" >> config/secret_macro.overlay
          printf "        label = \"SECRET_MACRO\";\n" >> config/secret_macro.overlay
          printf "    };\n" >> config/secret_macro.overlay
          printf "};\n" >> config/secret_macro.overlay # This closing brace now closes the 'behaviors' node

          # REMOVE this line: printf "};\n" >> config/secret_macro.overlay # This was for the outer / {
        env:
          STRING_PLACEHOLDER: ${{ secrets.STRING_PLACEHOLDER }}

      - name: West Build
        run: |
          BUILD_CMD="west build -s zmk/app -b ${{ matrix.board }} -- -DZMK_CONFIG=\"${GITHUB_WORKSPACE}/config\" -DSHIELD=${{ matrix.shield }}"
          if [ "${{ matrix.shield }}" = "totem_dongle" ]; then
            BUILD_CMD="${BUILD_CMD} ${{ matrix.cmake-args }}"
          fi
          eval "$BUILD_CMD"

      - name: Upload individual firmware artifact for collection
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.shield || 'no-shield' }}-${{ matrix.board }}
          path: build/zephyr/zmk.uf2

  combine_firmwares:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all firmware artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_firmwares_downloaded
          pattern: firmware-*

      - name: List downloaded files (for debugging - optional)
        run: ls -R all_firmwares_downloaded

      - name: Prepare firmware files for final archive
        run: |
          mkdir -p final_firmwares_directory

          for full_path_uf2 in $(find all_firmwares_downloaded -name "zmk.uf2"); do
            artifact_dir=$(dirname "$full_path_uf2")
            base_name=$(basename "$artifact_dir" | sed 's/^firmware-//')
            new_uf2_name="${base_name}-zmk.uf2"
            cp "$full_path_uf2" "final_firmwares_directory/$new_uf2_name"
          done

      - name: Get formatted timestamp for archive name
        id: timestamp_generator
        run: |
          formatted_time=$(date -u +%d%m%Y_%H%M)
          echo "ARTIFACT_NAME=zmk_$formatted_time" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload combined firmware archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.timestamp_generator.outputs.ARTIFACT_NAME }}
          path: final_firmwares_directory/