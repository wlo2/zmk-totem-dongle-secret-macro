name: Build ZMK firmware

on: [push, pull_request, workflow_dispatch]

jobs:
  matrix:
    runs-on: ubuntu-latest
    name: Fetch Build Keyboards
    outputs:
      build_matrix: ${{ env.build_matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Fetch Build Matrix
        run: |
          echo "build_matrix=$(yq -oj -I0 'build.yaml')" >> $GITHUB_ENV
          yq -oj "build.yaml"

  build:
    runs-on: ubuntu-latest
    container:
      image: zmkfirmware/zmk-build-arm:stable
    needs: matrix
    name: Build
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.build_matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create build directory
        run: |
          echo "build_dir=$(mktemp -d)" >> $GITHUB_ENV

      - name: Prepare variables
        shell: sh -x {0}
        env:
          board: ${{ matrix.board }}
          shield: ${{ matrix.shield }}
          artifact_name: ${{ matrix.artifact-name }}
          snippet: ${{ matrix.snippet }}
        run: |
          if [ -e zephyr/module.yml ]; then
            export zmk_load_arg=" -DZMK_EXTRA_MODULES='${GITHUB_WORKSPACE}'"
            new_tmp_dir="${TMPDIR:-/tmp}/zmk-config"
            mkdir -p "${new_tmp_dir}"
            echo "base_dir=${new_tmp_dir}" >> $GITHUB_ENV
          else
            echo "base_dir=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
          fi

          if [ -n "${snippet}" ]; then
            extra_west_args="-S \"${snippet}\""
          fi

          echo "zephyr_version=${ZEPHYR_VERSION}" >> $GITHUB_ENV
          echo "extra_west_args=${extra_west_args}" >> $GITHUB_ENV
          echo "extra_cmake_args=${shield:+-DSHIELD=\"$shield\"}${zmk_load_arg}" >> $GITHUB_ENV
          echo "display_name=${shield:+$shield - }${board}" >> $GITHUB_ENV
          echo "artifact_name=${artifact_name:-${shield:+$shield-}${board}-zmk}" >> $GITHUB_ENV

      - name: Copy config files to isolated temporary directory
        run: |
          if [ "${{ env.base_dir }}" != "${GITHUB_WORKSPACE}" ]; then
            mkdir "${{ env.base_dir }}/config"
            cp -R config/* "${{ env.base_dir }}/config/"
          fi

      - name: Generate secret macro overlay
        run: |
          mkdir -p "${{ env.base_dir }}/config"
          printf "behaviors {\n" > "${{ env.base_dir }}/config/secret_macro.overlay"
          printf "    secret_macro: secret_macro {\n" >> "${{ env.base_dir }}/config/secret_macro.overlay"
          printf "        compatible = \"zmk,behavior-macro\";\n" >> "${{ env.base_dir }}/config/secret_macro.overlay"
          printf "        #binding-cells = <0>;\n" >> "${{ env.base_dir }}/config/secret_macro.overlay"
          echo "        bindings = <${{ secrets.STRING_PLACEHOLDER }}>;" >> "${{ env.base_dir }}/config/secret_macro.overlay"
          printf "        wait-ms = <10>;\n" >> "${{ env.base_dir }}/config/secret_macro.overlay"
          printf "        tap-ms = <10>;\n" >> "${{ env.base_dir }}/config/secret_macro.overlay"
          printf "    };\n" >> "${{ env.base_dir }}/config/secret_macro.overlay"
          printf "};\n" >> "${{ env.base_dir }}/config/secret_macro.overlay"
        env:
          STRING_PLACEHOLDER: ${{ secrets.STRING_PLACEHOLDER }}

      - name: Cache west modules
        uses: actions/cache@v4
        continue-on-error: true
        env:
          cache_name: cache-zephyr-${{ env.zephyr_version }}-modules
        with:
          path: |
            ${{ env.base_dir }}/modules/
            ${{ env.base_dir }}/tools/
            ${{ env.base_dir }}/zephyr/
            ${{ env.base_dir }}/bootloader/
            ${{ env.base_dir }}/zmk/
          key: ${{ runner.os }}-build-${{ env.cache_name }}-${{ hashFiles('**/west.yml', '**/build.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache_name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: West Init
        working-directory: ${{ env.base_dir }}
        run: west init -l "${{ env.base_dir }}/config"

      - name: West Update
        working-directory: ${{ env.base_dir }}
        run: west update --fetch-opt=--filter=tree:0

      - name: West Zephyr export
        working-directory: ${{ env.base_dir }}
        run: west zephyr-export

      - name: West Build (${{ env.display_name }})
        working-directory: ${{ env.base_dir }}
        shell: sh -x {0}
        run: west build -s zmk/app -d "${{ env.build_dir }}" -b "${{ matrix.board }}" ${{ env.extra_west_args }} -- -DZMK_CONFIG=${{ env.base_dir }}/config ${{ env.extra_cmake_args }} ${{ matrix.cmake-args }}

      - name: ${{ env.display_name }} Kconfig file
        run: |
          if [ -f "${{ env.build_dir }}/zephyr/.config" ]
          then
            grep -v -e "^#" -e "^$" "${{ env.build_dir }}/zephyr/.config" | sort
          else
            echo "No Kconfig output"
          fi
        if: ${{ !cancelled() }}

      - name: Rename artifacts
        shell: sh -x {0}
        run: |
          mkdir "${{ env.build_dir }}/artifacts"
          if [ -f "${{ env.build_dir }}/zephyr/zmk.uf2" ]
          then
            cp "${{ env.build_dir }}/zephyr/zmk.uf2" "${{ env.build_dir }}/artifacts/${{ env.artifact_name }}.uf2"
          elif [ -f "${{ env.build_dir }}/zephyr/zmk.bin" ]
          then
            cp "${{ env.build_dir }}/zephyr/zmk.bin" "${{ env.build_dir }}/artifacts/${{ env.artifact_name }}.bin"
          fi

      - name: Archive (${{ env.display_name }})
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ env.artifact_name }}
          path: ${{ env.build_dir }}/artifacts

  merge:
    runs-on: ubuntu-latest
    needs: build
    name: Merge Output Artifacts
    steps:
      - name: Get formatted timestamp for archive name
        id: timestamp_generator
        run: |
          formatted_time=$(date -u +%d%m%Y_%H%M)
          echo "ARTIFACT_NAME=zmk_$formatted_time" >> $GITHUB_OUTPUT
        shell: bash

      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: ${{ steps.timestamp_generator.outputs.ARTIFACT_NAME }}
          pattern: artifact-*
          delete-merged: true